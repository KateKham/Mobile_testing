Мобильное тестирование — это процесс проверки функциональности, надежности, производительности и других аспектов мобильных приложений. Оно включает в себя тестирование на различных устройствах, операционных системах и разрешениях экрана, чтобы убедиться, что приложение работает корректно на всех устройствах и в различных условиях.

Мобильное тестирование является важным этапом в процессе разработки мобильных приложений для различных мобильных ОС, так как позволяет выявить ошибки и дефекты, которые могут привести к неправильной работе приложения и негативному опыту пользователей. Например, дефекты связанные с производительностью могут привести к ухудшению быстродействия приложения или затормозке на определенных устройствах, что может отрицательно повлиять на опыт пользователей и уменьшить вероятность повторного использования приложения.

=-=-=-=-=-=-=-=-=-=-Типы мобильных приложений=-=-=-=-=-=-=-=-=-=-

- Нативные приложения - написаны на родном для определенной платформы языке программирования. Для Android этим языком является Kotlin/Java, тогда как для iOS - objective-С или Swift. Нативные приложения находятся на самом устройстве, доступ к ним можно получить, нажав на иконку. Они устанавливаются через магазин приложений (Play Market на Android, App Store на iOS и др.). Они разработаны специально для конкретной платформы и могут использовать все возможности устройства - камеру, уведомления и т.п. (при наличии разрешений). В зависимости от предназначения нативного приложения, оно может всецело или частично обходиться без наличия интернет-соединения;
Тестирование нативных приложений включает в себя проверку работоспособности приложения на различных устройствах и операционных системах, а также проверку совместимости с различными версиями операционной системы и различными разрешениями экрана.

- Веб-приложения - на самом деле не являются приложениями как таковыми. В сущности, они представляют собой сайты, которые адаптированы и оптимизированы под любой смартфон и выглядят похоже на нативное приложение. И для того, чтобы воспользоваться им, достаточно иметь на устройстве браузер, знать адрес и располагать интернет-соединением. Запуская мобильные веб-приложения, пользователь выполняет все те действия, которые он выполняет при переходе на любой веб-сайт, а также получает возможность «установить» их на свой рабочий стол, создав закладку страницы веб-сайта. Веб-приложения отличаются кроссплатформенностью, то есть способны функционировать, независимо от платформы девайса. Очевидным недостатком такого вида приложений является утрата работоспособности при потере интернет-соединения. Причем из этого выплывает и другой минус - их производительность, которая находится на среднем уровне, в сравнении с другими видами приложений и зависит от возможностей интернет-соединения провайдера услуг. Помимо вышеперечисленного, веб-приложения не могут получить доступ к функциям системы и самого устройства;
Тестирование веб-приложений включает в себя проверку совместимости приложения с различными браузерами и устройствами.

- Гибридные приложения - это веб-приложения, которые выглядят как нативные и имеют их признаки. В частности, иконки на рабочем столе мобильного устройства пользователя, хорошую производительность и возможность работать в автономном режиме. Разрабатывается сразу для двух платформ и пишется на универсальном языке программирования. Разработка такого приложения дешевле, и за счёт этого оно быстрее выходит на рынок.
Важный плюс — автономное обновление. Для гибридного приложения не нужно постоянно выпускать новую версию, достаточно добавить изменения на сервер.
Один из минусов — слабый визуальный стиль. Приложение пишется сразу для нескольких платформ, поэтому фирменный стиль не адаптируют для каждой из них.
Тестирование гибридных приложений включает в себя проверку совместимости приложения с различными операционными системами и различными разрешениями экрана.

- Приложения для социальных сетей позволяют пользователям получать доступ к различным функциям социальных сетей, таким как общение с друзьями, публикация контента и т.д. Тестирование приложений для социальных сетей включает в себя проверку функциональности, связанной с социальными сетями, и проверку интеграции с различными социальными сетями.

- Игры являются одним из самых популярных типов мобильных приложений. Они требуют проверки производительности, графики, звука, управления и других аспектов, которые влияют на игровой процесс. Тестирование игр включает в себя проверку работоспособности игры на различных устройствах.


=-=-=-=-=-=-=-=-=-=-Особенности тестирования мобильных приложений=-=-=-=-=-=-=-=-=-=-
							 
При разработке мобильных приложений, а следовательно, и при тестировании, следует учитывать ряд определенных моментов:

- Постоянные прерывания в работе приложения: сворачивание, блокировка, входящий звонок или сообщение, уведомления, обновления приложений, выключение или перезагрузка, выгрузка системой из ОЗУ, разряд АКБ, подключение зарядки или других устройств, переход в энергосберегающий режим и режим ожидания, включение и отключение функций необходимых устройству (gps, bluetooth, связь), использование/отзыв разрешений, подключение/отключение карты памяти/симки/АКБ, платежи NFC, принудительная остановка);
- Работа в беспроводной сети с изменяющейся стабильностью и скоростью приема сигнала, переключение между сотовой связью и wi-fi;
- Уведомления;
- Взаимодействие с web view;
- Использование вертикальной и горизонтальной ориентации, повороты;
- Распространение приложений через маркеты;
- Необходимо соответствие гайдлайнам систем;
- Большое внимание уделяется UI и UX;
- В случае Android большая фрагментация устройств и прошивок со своими особенностями;
- Тач-интерфейс, мультитач, жесты;
- Множество каналов ввода: стоковая клавиатура, сторонние клавиатуры, хардовые клавиатуры, голос, жесты и т. д.;
- Биометрия;
- Повышенные требования к энергопотреблению и использованию аппаратных ресурсов;
- Ситуации установки и обновления при нехватке памяти, переноса приложения на карту памяти и обратно;
- Важность инсталляционного тестирования, особенно обновлений, т.к. в условиях высококонкурентного мобильного рынка приложения обновляются часто, чтобы предоставить пользователям новые функции как можно скорее и при этом должны проходить бесшовно;
- GPS и локализация;
- Размер дисплея, челка и вырез под фронтальную камеру;
------------------------------------------------------------------------------------------------------------------
Release Notes – это документ, описывающий изменения между выпускаемой и предыдущей версиями программного продукта.

Могут составляться для внешних пользователей, для отдела тестирования, документирования, маркетинга.

Замечания к версии ПО обычно составляет руководитель или владелец продукта (product manager, product owner), руководитель проекта (project manager), при необходимости привлекая технических писателей и маркетологов.

Цель:
- сообщить пользователям об исправленных ошибках, расширениях функциональности;
- сфокусировать отдел тестирования на проверку исправлений ошибок, корректной работы добавленной функциональности;
- подготовить изменения в руководствах пользователя, обучающих материалах, описания миграции на новую версию ПО
- реклама новой версии программного продукта

Содержание и формат - единого стандарта написания замечаний к версии ПО не существует, у каждой компании есть свои соглашения по формату. Содержание и форма замечаний могут сильно отличаться даже в одной компании в зависимости от изменений в выпускаемой версии ПО.

- Заголовок — «Замечания к релизу», название продукта, название версии, дата выпуска и т. д.
- Обзорная часть — Резюме изменений в версии
- Цель — Краткое описание цели выпуска версии со списком изменений, исправлений ошибок, добавленной функциональности
- Описание ошибок — список ошибок (для каждой ошибки: в чем ошибка, где и как воспроизводится), описание исправлений этих ошибок
- Перечень требуемых обновлений — для обновления аппаратной и программной части, документации
- Юридическая информация — лицензии, гарантии, отказ от ответственности и т. д.
- Контактная информация
---------------------------------------------------------------------------------------------------------------------
Фреймворк (англ. «framework») — это программная среда, предоставляющая основу для разработки приложений или программного обеспечения. Он включает в себя набор библиотек, инструментов, структур данных, шаблонов и прочих компонентов, которые помогают разработчикам упростить и ускорить процесс создания приложений, а также обеспечивают структуру и организацию проекта.

Основная идея фреймворка заключается в том, чтобы предоставить стандартизированный подход к разработке, чтобы разработчику не приходилось начинать разработку с нуля, а мог использовать готовые инструменты и компоненты для решения типовых задач. Фреймворк может определять архитектурные принципы, общую структуру приложения, способы взаимодействия между компонентами и другие ключевые аспекты разработки.

Фреймворки могут быть общими и универсальными, предназначенными для различных типов приложений (например, веб-фреймворки), или специализированными для конкретных задач и областей программирования (например, фреймворки для работы с искусственным интеллектом, фреймворки для создания игр и т.д.).

Нативные фреймворки — это фреймворки, которые предназначены для разработки мобильных приложений с использованием официальных SDK (Software Development Kit) и языков программирования для каждой конкретной платформы. Такие фреймворки позволяют разработчикам создавать приложения, используя полный набор инструментов и функциональности, предоставляемых операционной системой мобильного устройства. Это обеспечивает максимальное качество, производительность и доступ к особенностям каждой платформы.

Некоторые из наиболее популярных нативных фреймворков для разработки мобильных приложений:

===============iOS (Apple):
- Xcode + Swift: Официальная среда разработки для iOS приложений, использующая язык программирования Swift.
- Objective-C: Классический язык программирования для разработки iOS приложений.
===============Android (Google):
- Android Studio + Kotlin: Официальная среда разработки для Android приложений, использующая язык программирования Kotlin.
- Java: Классический язык программирования для разработки Android приложений.
===============Windows (Microsoft):
- Visual Studio + C#: Официальная среда разработки для Windows-приложений, использующая язык программирования C# и платформу .NET.
===============macOS (Apple):
- Xcode + Swift/Objective-C: Официальные среды разработки для macOS приложений, аналогично iOS, с использованием Swift или Objective-C.

=-=-=-=-=-=-=-=-=-=-Кроссплатформенные мобильные фреймворки=-=-=-=-=-=-=-=-=-=-
Есть множество мобильных фреймворков, которые разработчики могли использовать для создания мобильных приложений под различные платформы. Некоторые из самых популярных мобильных фреймворков включали:

- React Native: Основанный на языке JavaScript и разрабатываемый Facebook*. Позволяет создавать кросс-платформенные мобильные приложения для iOS и Android с использованием компонентов React.
- Flutter: Разрабатываемый Google и использующий язык программирования Dart. Позволяет создавать кросс-платформенные приложения с высокой производительностью, которые компилируются непосредственно в машинный код.
- Xamarin: Разрабатываемый Microsoft, позволяет использовать C# для создания кросс-платформенных приложений для iOS и Android.
- Ionic: Основанный на веб-технологиях (HTML, CSS, JavaScript) и использующий фреймворк Angular. Позволяет создавать кросс-платформенные мобильные приложения.